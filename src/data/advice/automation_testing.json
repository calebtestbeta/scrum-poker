{
  "category": "automation_testing",
  "displayName": "自動化測試",
  "icon": "🤖",
  "description": "自動化測試任務的估點建議",
  "templates": {
    "highVariance": {
      "title": "🤖 自動化測試策略分歧",
      "content": "自動化測試複雜度評估差異大，需討論：\n• 測試框架和工具選擇\n• 測試環境建置複雜度\n• 測試資料管理策略\n• CI/CD 管道整合需求",
      "keywords": ["測試框架", "測試環境", "資料管理", "CI/CD整合"]
    },
    "lowVariance": {
      "title": "⚙️ 自動化測試規劃清晰",
      "content": "自動化測試方向一致！建議重點：\n• 優先自動化穩定的核心功能\n• 建立可重用的測試元件\n• 設計清晰的測試報告\n• 規劃測試程式碼維護策略",
      "keywords": ["核心功能", "可重用元件", "測試報告", "維護策略"]
    },
    "highEstimate": {
      "title": "🔧 複雜自動化測試建置",
      "content": "這是個具挑戰性的自動化測試任務！\n• 設計完整的測試架構\n• 建立測試資料工廠模式\n• 實作並行測試執行機制\n• 整合多層級測試金字塔",
      "keywords": ["測試架構", "資料工廠", "並行執行", "測試金字塔"]
    },
    "lowEstimate": {
      "title": "⚡ 輕量自動化測試",
      "content": "基礎自動化測試任務，聚焦實用性：\n• 實作關鍵路徑的自動化\n• 建立基本的斷言驗證\n• 設定簡單的測試執行排程\n• 確保測試結果可讀性",
      "keywords": ["關鍵路徑", "斷言驗證", "執行排程", "結果可讀性"]
    }
  },
  "technologies": ["Selenium", "Cypress", "Playwright", "Jest", "TestNG", "Jenkins"],
  "commonChallenges": [
    "測試環境穩定性維護",
    "非同步操作處理",
    "測試資料隔離和清理",
    "測試執行時間優化",
    "假陽性測試結果處理"
  ]
}